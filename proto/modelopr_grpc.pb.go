// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: modelopr.proto

package modelpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ModelOprServiceClient is the client API for ModelOprService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ModelOprServiceClient interface {
	// get modelInfo via key (maybe device)
	GetModelInfo(ctx context.Context, in *ModelInfoReq, opts ...grpc.CallOption) (*ModelInfo, error)
	// save Model to Staging Mode
	SaveStagingVersion(ctx context.Context, opts ...grpc.CallOption) (ModelOprService_SaveStagingVersionClient, error)
	// commit Staging Model to Version model, version+1
	CommitStagingVersion(ctx context.Context, in *ModelInfoReq, opts ...grpc.CallOption) (*UploadModelObjResp, error)
	// save Model to DB, version+1
	SaveModel(ctx context.Context, opts ...grpc.CallOption) (ModelOprService_SaveModelClient, error)
	// get Latest Model version
	GetLatestModel(ctx context.Context, in *ModelInfoReq, opts ...grpc.CallOption) (*ModelObj, error)
}

type modelOprServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewModelOprServiceClient(cc grpc.ClientConnInterface) ModelOprServiceClient {
	return &modelOprServiceClient{cc}
}

func (c *modelOprServiceClient) GetModelInfo(ctx context.Context, in *ModelInfoReq, opts ...grpc.CallOption) (*ModelInfo, error) {
	out := new(ModelInfo)
	err := c.cc.Invoke(ctx, "/da.ModelOprService/getModelInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelOprServiceClient) SaveStagingVersion(ctx context.Context, opts ...grpc.CallOption) (ModelOprService_SaveStagingVersionClient, error) {
	stream, err := c.cc.NewStream(ctx, &ModelOprService_ServiceDesc.Streams[0], "/da.ModelOprService/saveStagingVersion", opts...)
	if err != nil {
		return nil, err
	}
	x := &modelOprServiceSaveStagingVersionClient{stream}
	return x, nil
}

type ModelOprService_SaveStagingVersionClient interface {
	Send(*UploadModelObjReq) error
	CloseAndRecv() (*UploadModelObjResp, error)
	grpc.ClientStream
}

type modelOprServiceSaveStagingVersionClient struct {
	grpc.ClientStream
}

func (x *modelOprServiceSaveStagingVersionClient) Send(m *UploadModelObjReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *modelOprServiceSaveStagingVersionClient) CloseAndRecv() (*UploadModelObjResp, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadModelObjResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *modelOprServiceClient) CommitStagingVersion(ctx context.Context, in *ModelInfoReq, opts ...grpc.CallOption) (*UploadModelObjResp, error) {
	out := new(UploadModelObjResp)
	err := c.cc.Invoke(ctx, "/da.ModelOprService/commitStagingVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelOprServiceClient) SaveModel(ctx context.Context, opts ...grpc.CallOption) (ModelOprService_SaveModelClient, error) {
	stream, err := c.cc.NewStream(ctx, &ModelOprService_ServiceDesc.Streams[1], "/da.ModelOprService/saveModel", opts...)
	if err != nil {
		return nil, err
	}
	x := &modelOprServiceSaveModelClient{stream}
	return x, nil
}

type ModelOprService_SaveModelClient interface {
	Send(*UploadModelObjReq) error
	CloseAndRecv() (*UploadModelObjResp, error)
	grpc.ClientStream
}

type modelOprServiceSaveModelClient struct {
	grpc.ClientStream
}

func (x *modelOprServiceSaveModelClient) Send(m *UploadModelObjReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *modelOprServiceSaveModelClient) CloseAndRecv() (*UploadModelObjResp, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadModelObjResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *modelOprServiceClient) GetLatestModel(ctx context.Context, in *ModelInfoReq, opts ...grpc.CallOption) (*ModelObj, error) {
	out := new(ModelObj)
	err := c.cc.Invoke(ctx, "/da.ModelOprService/getLatestModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ModelOprServiceServer is the server API for ModelOprService service.
// All implementations must embed UnimplementedModelOprServiceServer
// for forward compatibility
type ModelOprServiceServer interface {
	// get modelInfo via key (maybe device)
	GetModelInfo(context.Context, *ModelInfoReq) (*ModelInfo, error)
	// save Model to Staging Mode
	SaveStagingVersion(ModelOprService_SaveStagingVersionServer) error
	// commit Staging Model to Version model, version+1
	CommitStagingVersion(context.Context, *ModelInfoReq) (*UploadModelObjResp, error)
	// save Model to DB, version+1
	SaveModel(ModelOprService_SaveModelServer) error
	// get Latest Model version
	GetLatestModel(context.Context, *ModelInfoReq) (*ModelObj, error)
	mustEmbedUnimplementedModelOprServiceServer()
}

// UnimplementedModelOprServiceServer must be embedded to have forward compatible implementations.
type UnimplementedModelOprServiceServer struct {
}

func (UnimplementedModelOprServiceServer) GetModelInfo(context.Context, *ModelInfoReq) (*ModelInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModelInfo not implemented")
}
func (UnimplementedModelOprServiceServer) SaveStagingVersion(ModelOprService_SaveStagingVersionServer) error {
	return status.Errorf(codes.Unimplemented, "method SaveStagingVersion not implemented")
}
func (UnimplementedModelOprServiceServer) CommitStagingVersion(context.Context, *ModelInfoReq) (*UploadModelObjResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitStagingVersion not implemented")
}
func (UnimplementedModelOprServiceServer) SaveModel(ModelOprService_SaveModelServer) error {
	return status.Errorf(codes.Unimplemented, "method SaveModel not implemented")
}
func (UnimplementedModelOprServiceServer) GetLatestModel(context.Context, *ModelInfoReq) (*ModelObj, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestModel not implemented")
}
func (UnimplementedModelOprServiceServer) mustEmbedUnimplementedModelOprServiceServer() {}

// UnsafeModelOprServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ModelOprServiceServer will
// result in compilation errors.
type UnsafeModelOprServiceServer interface {
	mustEmbedUnimplementedModelOprServiceServer()
}

func RegisterModelOprServiceServer(s grpc.ServiceRegistrar, srv ModelOprServiceServer) {
	s.RegisterService(&ModelOprService_ServiceDesc, srv)
}

func _ModelOprService_GetModelInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModelInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelOprServiceServer).GetModelInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/da.ModelOprService/getModelInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelOprServiceServer).GetModelInfo(ctx, req.(*ModelInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelOprService_SaveStagingVersion_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ModelOprServiceServer).SaveStagingVersion(&modelOprServiceSaveStagingVersionServer{stream})
}

type ModelOprService_SaveStagingVersionServer interface {
	SendAndClose(*UploadModelObjResp) error
	Recv() (*UploadModelObjReq, error)
	grpc.ServerStream
}

type modelOprServiceSaveStagingVersionServer struct {
	grpc.ServerStream
}

func (x *modelOprServiceSaveStagingVersionServer) SendAndClose(m *UploadModelObjResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *modelOprServiceSaveStagingVersionServer) Recv() (*UploadModelObjReq, error) {
	m := new(UploadModelObjReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ModelOprService_CommitStagingVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModelInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelOprServiceServer).CommitStagingVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/da.ModelOprService/commitStagingVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelOprServiceServer).CommitStagingVersion(ctx, req.(*ModelInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelOprService_SaveModel_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ModelOprServiceServer).SaveModel(&modelOprServiceSaveModelServer{stream})
}

type ModelOprService_SaveModelServer interface {
	SendAndClose(*UploadModelObjResp) error
	Recv() (*UploadModelObjReq, error)
	grpc.ServerStream
}

type modelOprServiceSaveModelServer struct {
	grpc.ServerStream
}

func (x *modelOprServiceSaveModelServer) SendAndClose(m *UploadModelObjResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *modelOprServiceSaveModelServer) Recv() (*UploadModelObjReq, error) {
	m := new(UploadModelObjReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ModelOprService_GetLatestModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModelInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelOprServiceServer).GetLatestModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/da.ModelOprService/getLatestModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelOprServiceServer).GetLatestModel(ctx, req.(*ModelInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ModelOprService_ServiceDesc is the grpc.ServiceDesc for ModelOprService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ModelOprService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "da.ModelOprService",
	HandlerType: (*ModelOprServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getModelInfo",
			Handler:    _ModelOprService_GetModelInfo_Handler,
		},
		{
			MethodName: "commitStagingVersion",
			Handler:    _ModelOprService_CommitStagingVersion_Handler,
		},
		{
			MethodName: "getLatestModel",
			Handler:    _ModelOprService_GetLatestModel_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "saveStagingVersion",
			Handler:       _ModelOprService_SaveStagingVersion_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "saveModel",
			Handler:       _ModelOprService_SaveModel_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "modelopr.proto",
}
